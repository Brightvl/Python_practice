# 7.1[34]: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках не
# настолько просто, насколько легко он их придумывает, Вам стоит написать программу. Винни-Пух считает,
# что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. Фраза может
# состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг от друга
# пробелами.
# Написать функцию, которая принимает строку текста и проверяет ее ритм (по Винни-Пуху) Если ритм есть,
# функция возвращает True, иначе возвращает False

# Примеры/Тесты:
#     <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам") -> True
#     <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> True
#     <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> False
#     <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> False
#     <function_name>("Пам-парам-пурум Пум-пурум-карам") -> True
# Примечание.

# Подумайте об эффективности алгоритма. Какие структуры данных будут более эффективны по скорости.
# Алгоритм должен работать так, чтобы не делать лишних проверок. Подумайте, возможно некоторые проверки не нужны.
# (*) Усложнение.

# Функция имеет параметр, который определяет, надо ли возвращать полную информацию о кол-ве гласных букв в фразах.
# Эта информация возвращается в виде списка словарей. Каждый элемент списка(словарь) соответствует фразе.
#
# Примеры/Тесты:
# <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам", False) -> True
# <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам", True) -> (True, [{'а': 4}, {'а': 4}, {'а': 4}])
# <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") ->
# (True, [{'а': 4}, {'а': 2, 'у': 2}, {'а': 2, 'е': 1, 'о': 1}])
# <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> (False, [{'а': 4}, {'а': 2, 'у': 3}])
# <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") ->
# (False, [{'а': 11}, {'у': 6, 'а': 3}])
# <function_name>("Пам-парам-пурум Пум-пурум-карам") -> (True, [{'а': 3, 'у': 2}, {'у': 3, 'а': 2}])

from time import perf_counter  # упрощённые счётчики производительности функции
from random import randint



def define_rhythm(string: str, flag = False):
    def_list = string.split() # переводим в список разбивая строку

    alphabet = "аиеёоуыэюя"     # строка с буквами алфавита
    idx = sum(1 for el in def_list[0] if el in alphabet)    #Записываем количество слогов 1-й фразы списка
    list_dict_symbol = []   # Пустой список для словарей (в словарях будет записано слоги и их число в фразах)
    for phrase in def_list:     #Пребираем основной список
        new_dict = {}       #Создаем словарь для одной фразы
        for symbol in phrase:   #перебираем символы в фразе
            if symbol in alphabet:  # Если символ есть содержится в алфавите
                if symbol in new_dict:  # Есть ли символ в словаре
                    new_dict[symbol] += 1   #Увеличь его значение на 1
                else:
                    new_dict[symbol] = 1    # иначе добавь/создай его в словаре со значением 1
        list_dict_symbol.append(new_dict)   # Добавь полученый словарь в список символов
        idy = sum([val for phrase1 in list_dict_symbol for val in phrase1.values()]) # Определяем общее количество
        # слогов в фразе

        if idx != idy: # Если еоличество слогов в 1 фразе не равно остальным
            return False, list_dict_symbol if flag else None    #верни False и список словарей
    return True, list_dict_symbol if flag else None #верни False и список словарей

print(define_rhythm("пара-ра-рам рам-пум-пупам па-ре-по-дам", True))


# def define_rhythm(string: str):
#     t1 = perf_counter()
#     def_list = string.split()
#     alphabet = "аиеёоуыэюя"
#     idx = sum(1 for el in def_list[0] if el in alphabet)
#     for phrase in def_list[1:]:
#         idy = sum(1 for symbol in phrase if symbol in alphabet)
#         if idx != idy:
#             t2 = perf_counter()
#             return False, t2 - t1
#     t2 = perf_counter()
#     return True, t2 - t1
#
#
# print(define_rhythm("пара-ра-рам рам-пам-папам па-ра-па-дам"))
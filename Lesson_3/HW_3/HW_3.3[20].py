# 3.3[20]: В настольной игре Скрабл (Scrabble) 
# каждая буква имеет определенную ценность. 
# В случае с английским алфавитом очки распределяются так:
# A, E, I, O, U, L, N, S, T, R – 1 очко;
# D, G – 2 очка;
# B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка;
# K – 5 очков;
# J, X – 8 очков;
# Q, Z – 10 очков.

# А русские буквы оцениваются так:
# А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# Д, К, Л, М, П, У – 2 очка;
# Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка;
# Ж, З, Х, Ц, Ч – 5 очков;
# Ш, Э, Ю – 8 очков;
# Ф, Щ, Ъ – 10 очков.

# Напишите программу, которая вычисляет стоимость 
# введенного пользователем слова. Будем считать, что 
# на вход подается только одно слово, которое содержит 
# либо только английские, либо только русские буквы и 
# заранее известно какой алфавит надо использовать.

#     Примеры/Тесты:
#     Input:   ноутбук
#     Output:  12
    
#     Input:   notebook
#     Output:  14

# ```(*)``` **Примечание.**
# Подумайте о том какие структуры данных 
# здесь наиболее удобно использовать, чтобы 
# просто проверять в какую группу попадает буква, 
# а также просто накапливать сумму очков.

csrable_piont_table = {
                       1: "AEIOULNSTRАВЕИНОРСТ",
                       2: "DGДКЛМПУ",
                       3: "BCMPБГЁЬ",
                       4: "FHVWYЙЫ",
                       5: "KЖЗХЦЧ",
                       8: "JXШЭЮ",
                       10: "QZФЩЪ",
                       }

word = input("Введите слово: ")
sum_letter = 0

# Мы берем букву из слова word
for char in word:
# Мы берем ключ и значение из словаря 
    for point, chars in csrable_piont_table.items():
# Мы ищем в значении из словаря нужную букву 
        if char.lower() in chars.lower():
            sum_letter += point
            break
print(sum_letter)

# print(f"{type(point)} {point}, {type(chars)} {chars}")
